"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ModalView;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _native = require("@react-navigation/native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ModalView({
  state,
  navigation,
  descriptors
}) {
  return /*#__PURE__*/React.createElement(_native.NavigationHelpersContext.Provider, {
    value: navigation
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.container
  }, state.routes.reduceRight((acc, route, index) => {
    const focused = index === state.index;
    const descriptor = descriptors[route.key];
    const {
      animationType = 'slide',
      ...options
    } = descriptor.options;
    const element = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_reactNative.View, {
      style: _reactNative.StyleSheet.absoluteFill,
      accessibilityElementsHidden: !focused,
      importantForAccessibility: focused ? 'auto' : 'no-hide-descendants'
    }, descriptor.render()), acc);

    if (index === 0) {
      return element;
    }

    const onOrientationChange = e => navigation.emit({
      type: 'orientationChange',
      target: route.key,
      data: e.nativeEvent
    });

    const onOpen = () => {
      navigation.dispatch(s => {
        if (s.routeNames.includes(route.name) && !s.routes.some(r => r.key === route.key)) {
          // If route isn't present in current state, but was closing, assume that a close animation was cancelled
          // So we need to add this route back to the state
          return _native.CommonActions.navigate(route);
        } else {
          return _native.CommonActions.reset(s);
        }
      });
    };

    const onClose = () => navigation.dispatch(s => {
      // If a route exists in state, trigger a pop
      // This will happen in when the route was closed from native side
      // e.g. When the close animation triggered from a gesture ends
      if (s.routes.some(r => r.key === route.key)) {
        return { ..._native.StackActions.pop(),
          source: route.key,
          target: s.key
        };
      } else {
        return _native.CommonActions.reset(s);
      }
    });

    return /*#__PURE__*/React.createElement(_reactNative.Modal, _extends({}, options, {
      animationType: animationType,
      onOrientationChange: onOrientationChange,
      onShow: onOpen,
      onDismiss: onClose,
      onRequestClose: onClose,
      visible: true
    }), element);
  }, /*#__PURE__*/React.createElement(React.Fragment, null))));
}

const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=ModalView.js.map