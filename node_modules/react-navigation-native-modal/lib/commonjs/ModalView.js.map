{"version":3,"sources":["ModalView.tsx"],"names":["ModalView","state","navigation","descriptors","styles","container","routes","reduceRight","acc","route","index","focused","descriptor","key","animationType","options","element","StyleSheet","absoluteFill","render","onOrientationChange","e","emit","type","target","data","nativeEvent","onOpen","dispatch","s","routeNames","includes","name","some","r","CommonActions","navigate","reset","onClose","StackActions","pop","source","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Modal, StyleSheet, NativeSyntheticEvent } from 'react-native';\nimport {\n  NavigationHelpersContext,\n  StackNavigationState,\n  ParamListBase,\n  StackActions,\n  CommonActions,\n} from '@react-navigation/native';\nimport type {\n  ModalDescriptorMap,\n  ModalNavigationConfig,\n  ModalNavigationHelpers,\n} from './types';\n\ntype Props = ModalNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: ModalNavigationHelpers;\n  descriptors: ModalDescriptorMap;\n};\n\nexport default function ModalView({ state, navigation, descriptors }: Props) {\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <View style={styles.container}>\n        {state.routes.reduceRight<JSX.Element>((acc, route, index) => {\n          const focused = index === state.index;\n          const descriptor = descriptors[route.key];\n          const { animationType = 'slide', ...options } = descriptor.options;\n\n          const element = (\n            <>\n              <View\n                style={StyleSheet.absoluteFill}\n                accessibilityElementsHidden={!focused}\n                importantForAccessibility={\n                  focused ? 'auto' : 'no-hide-descendants'\n                }\n              >\n                {descriptor.render()}\n              </View>\n              {acc}\n            </>\n          );\n\n          if (index === 0) {\n            return element;\n          }\n\n          const onOrientationChange = (e: NativeSyntheticEvent<any>) =>\n            navigation.emit({\n              type: 'orientationChange',\n              target: route.key,\n              data: e.nativeEvent,\n            });\n\n          const onOpen = () => {\n            navigation.dispatch((s) => {\n              if (\n                s.routeNames.includes(route.name) &&\n                !s.routes.some((r) => r.key === route.key)\n              ) {\n                // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n                // So we need to add this route back to the state\n                return CommonActions.navigate(route);\n              } else {\n                return CommonActions.reset(s);\n              }\n            });\n          };\n\n          const onClose = () =>\n            navigation.dispatch((s) => {\n              // If a route exists in state, trigger a pop\n              // This will happen in when the route was closed from native side\n              // e.g. When the close animation triggered from a gesture ends\n              if (s.routes.some((r) => r.key === route.key)) {\n                return {\n                  ...StackActions.pop(),\n                  source: route.key,\n                  target: s.key,\n                };\n              } else {\n                return CommonActions.reset(s);\n              }\n            });\n\n          return (\n            <Modal\n              {...options}\n              animationType={animationType}\n              onOrientationChange={onOrientationChange}\n              onShow={onOpen}\n              onDismiss={onClose}\n              onRequestClose={onClose}\n              visible\n            >\n              {element}\n            </Modal>\n          );\n        }, <></>)}\n      </View>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}